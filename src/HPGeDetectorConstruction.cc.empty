
#include "HPGeDetectorConstruction.hh"
#include "HPGeSD.hh"
#include "HPGeRunAction.hh"

#include "G4LogicalBorderSurface.hh"
#include "G4LogicalSkinSurface.hh"
#include "G4Box.hh"
#include "G4Sphere.hh"
#include "G4Tubs.hh"
#include "G4Torus.hh"
#include "G4Trd.hh"
#include "G4LogicalVolume.hh"
#include "G4RotationMatrix.hh"
#include "G4ThreeVector.hh"
#include "G4Transform3D.hh"
#include "G4PVPlacement.hh"
#include "G4OpBoundaryProcess.hh"
#include "G4EllipticalTube.hh"
#include "G4SDManager.hh"
#include "G4Colour.hh"
#include "G4VisAttributes.hh"
#include "G4UnionSolid.hh"
#include "G4IntersectionSolid.hh"
#include "G4SubtractionSolid.hh"
#include "G4SystemOfUnits.hh"
#include "G4PhysicalConstants.hh"
#include "G4NistManager.hh"
#include "G4RunManager.hh"

//#include "G4tgrMessenger.hh"
#include "G4tgbVolumeMgr.hh"


#include "globals.hh"


HPGeDetectorConstruction::HPGeDetectorConstruction(G4String GeometryFile)
{
    fGeometryFile = GeometryFile;
}

HPGeDetectorConstruction::~HPGeDetectorConstruction()
{}



G4VPhysicalVolume* HPGeDetectorConstruction::Construct()
{
    
    //======= define materials ==============================================
    
    // define materials from NIST manager
    G4NistManager* nist = G4NistManager::Instance();
    
    G4Material* air_mat = nist->FindOrBuildMaterial("G4_Pb");
  
    // +++++++ world volume ++++++++++++++++++++++++++++++++++
    
    
    G4double expHall_x=1.*m;
    G4double expHall_y=1.*m;
    G4double expHall_z=1.*m;
    
    G4Box* 			expHall_box  = new G4Box	   ("World",expHall_x,expHall_y,expHall_z);
    G4LogicalVolume* 	expHall_log  = new G4LogicalVolume (expHall_box,air_mat,"World",0,0,0);
    G4VPhysicalVolume*    	expHall_phys = new G4PVPlacement   (0,G4ThreeVector(),expHall_log,"World",0,false,0);
    
    
    return expHall_phys;
}

